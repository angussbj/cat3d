{"version":3,"sources":["ui/Colors.ts","ui/Column.tsx","ui/Row.tsx","ui/T.tsx","components/useEnvironment.tsx","components/Draggable.tsx","utilities/keys.ts","logic/Elements.ts","components/materials/HighlightMaterial.tsx","components/materials/SolidMaterial.tsx","components/materials/TranslucentMaterial.tsx","components/geometries/bezierTubeGeometry.ts","components/geometries/sphereGeometry.ts","components/Content.tsx","components/Lighting.tsx","components/Environment.tsx","App.tsx","index.tsx"],"names":["Colors","HIGHLIGHTS","Color","BLACK","DARK","GREY","LIGHT","WHITE","LIGHTING","WARM","NEUTRAL","COLD","styled","div","EnvironmentContext","createContext","setCurrentlyDragging","setOnBackgroundClick","setControlMode","controlMode","render","EnvironmentContextProvider","children","environment","Provider","value","useEnvironment","useContext","Draggable","position","Vector3","onClick","objectRef","useRef","useThree","camera","size","raycaster","useMemo","Raycaster","planeRef","Plane","mouseObjectOffset","useEffect","current","copy","screenToSpace","useCallback","x","y","screenCoords","Vector2","width","height","intersection","setFromCamera","ray","intersectPlane","bind","useDrag","xy","movement","dx","dy","first","last","event","stopPropagation","cameraDirection","getWorldDirection","setFromNormalAndCoplanarPoint","clone","sub","add","ref","keys","o","Object","isNodeId","id","startsWith","isArrowId","Elements","nodes","arrows","twoArrows","threeArrows","nodeIdCounter","arrowIdCounter","twoArrowIdCounter","threeArrowIdCounter","selected","this","autoBind","domainId","codomainId","guidePoint","multiplyScalar","values","filter","onNodeClick","onArrowClick","console","log","isSelected","shiftKey","ctrlKey","metaKey","getSelectedNodeIds","forEach","addArrow","arrowId","arrow","twoArrowId","twoArrow","codomainIds","includes","domainIds","threeArrowId","threeArrow","key","deleteNode","deleteArrow","isTwoArrowId","deleteTwoArrow","isThreeArrowId","deleteThreeArrow","HighlightMaterial","color","attach","toString","side","BackSide","SolidMaterial","emissiveIntensity","roughness","TranslucentMaterial","opacity","transparent","getBezierTubeGeometry","points","radius","resolution","ParametricGeometries","TubeGeometry","length","QuadraticBezierCurve3","CubicBezierCurve3","getSphereGeometry","semicirclePoints","i","push","Math","sin","PI","cos","LatheGeometry","Content","elements","document","addEventListener","onKeyDown","removeEventListener","useState","nodeRadius","guidePointRadius","highlightWidth","arrowRadius","plane","altKey","button","addNode","getNodes","map","nodeId","geometry","castShadow","receiveShadow","getArrows","index","getArrowPoints","Lighting","intensity","Environment","currentlyDragging","onBackgroundClick","setRenderHelper","style","left","right","top","bottom","background","onPointerMissed","shadows","args","OrbitControls","autoRotate","App","ReactDOM","StrictMode","getElementById"],"mappings":"8OAEaA,EAAS,CACpBC,WAAY,CAACC,IAAM,YACnBC,MAAOD,IAAM,WACbE,KAAMF,IAAM,WACZG,KAAMH,IAAM,WACZI,MAAOJ,IAAM,WACbK,MAAOL,IAAM,WACbM,SAAU,CACRC,KAAMP,IAAM,WACZQ,QAASR,IAAM,WACfS,KAAMT,IAAM,a,wBCVMU,IAAOC,IAAV,yECAAD,IAAOC,IAAV,8FAAT,I,SCmCkBD,IAAOC,IAAV,kM,8CCrBhBC,EAAqBC,wBAA2B,CACpDC,qBAAsB,aACtBC,qBAAsB,aACtBC,eAAgB,aAChBC,YAAa,OACbC,OAAQ,eAGH,SAASC,EAAT,GAMW,IALhBC,EAKe,EALfA,SACAC,EAIe,EAJfA,YAKA,OACE,cAACT,EAAmBU,SAApB,CAA6BC,MAAOF,EAApC,SACGD,IAKA,SAASI,IACd,OAAOC,qBAAWb,GCnBb,IAAMc,EAAY,SAAC,GAIE,IAAD,IAHzBC,gBAGyB,MAHd,IAAIC,UAAQ,EAAG,EAAG,GAGJ,EAFzBC,EAEyB,EAFzBA,QACAT,EACyB,EADzBA,SAEMU,EAAYC,iBAAc,MACxBjB,EAAyBU,IAAzBV,qBAFiB,EAGAkB,cAAjBC,EAHiB,EAGjBA,OAAQC,EAHS,EAGTA,KAGVC,EAAYC,mBAAQ,kBAAM,IAAIC,cAAa,IAC3CC,EAAWP,iBAAO,IAAIQ,QAAM,IAAIX,UAAQ,EAAG,EAAG,KAC9CY,EAAoBT,iBAAO,IAAIH,UAAQ,EAAG,EAAG,IAEnDa,qBAAU,WACJX,EAAUY,SACZZ,EAAUY,QAAQf,SAASgB,KAAKhB,KAEjC,IAEH,IAAMiB,EAAgBC,uBAAY,SAACC,EAAWC,GAC5C,IAAMC,EAAe,IAAIC,UACtBH,EAAIZ,EAAKgB,MAAS,EAAI,GACrBH,EAAIb,EAAKiB,OAAU,EAAI,GAGrBC,EAAe,IAAIxB,UAIzB,OAHAO,EAAUkB,cAAcL,EAAcf,GACtCE,EAAUmB,IAAIC,eAAejB,EAASI,QAASU,GAExCA,IACN,IAEGI,EAAOC,aACX,YAA6D,IAAD,gBAAzDC,GAAyD,GAApDZ,EAAoD,KAAjDC,EAAiD,qBAA7CY,SAA6C,GAAlCC,EAAkC,KAA9BC,EAA8B,KAAzBC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAE9C,GADAA,EAAMC,kBACFH,EAAO,CAAC,IAAD,IACThD,GAAqB,GAErB,IAAMoD,EAAkB,IAAItC,UAC5BK,EAAOkC,kBAAkBD,GACzB5B,EAASI,QAAQ0B,8BACfF,GACA,UAAApC,EAAUY,eAAV,eAAmBf,WAAY,IAAIC,UAAQ,EAAG,EAAG,IAGnDY,EAAkBE,SAChB,UAAAZ,EAAUY,eAAV,eAAmBf,SAAS0C,QAAQC,IAAI1B,EAAcE,EAAGC,MACzD,IAAInB,UAAQ,EAAG,EAAG,GAGlBE,EAAUY,SACZZ,EAAUY,QAAQf,SAASgB,KACzBC,EAAcE,EAAGC,GAAGwB,IAAI/B,EAAkBE,UAI1CqB,IACFjD,GAAqB,GACjBgB,EAAUY,SAASf,EAASgB,KAAKb,EAAUY,QAAQf,UAC5C,IAAPiC,GAAmB,IAAPC,IAAiB,OAAPhC,QAAO,IAAPA,KAAUmC,QAK1C,OACE,iDAAWR,KAAX,IAAmBgB,IAAK1C,EAAxB,SACGV,M,sBCvFA,SAASqD,EAAwCC,GACtD,OAAOC,OAAOF,KAAKC,G,YCUrB,SAASE,EAASC,GAChB,OAAOA,EAAGC,WAAW,KAGvB,SAASC,EAAUF,GACjB,OAAOA,EAAGC,WAAW,MAwChB,IAAME,EAAb,WAWE,WAAoB9D,GAAqB,yBAArBA,SAAoB,KAVhC+D,MAA8B,GAUE,KAThCC,OAAiC,GASD,KARhCC,UAA0C,GAQV,KAPhCC,YAAgD,GAOhB,KANhCC,cAAgB,EAMgB,KALhCC,eAAiB,EAKe,KAJhCC,kBAAoB,EAIY,KAHhCC,oBAAsB,EAGU,KAFhCC,SAAuC,GATjD,2CAaE,SAAQ9D,GACN,IAAMkD,EAAU,WAAOa,KAAKL,eAC5BK,KAAKL,eAAiB,EACtBK,KAAKT,MAAMJ,GAAM,CAAElD,WAAUkD,MAC7Ba,KAAKD,SAAW,GAChBC,KAAKxE,SACLyE,YAASD,QAnBb,sBAsBE,SAASE,EAAkBC,GACzB,IAAMhB,EAAW,YAAQa,KAAKJ,gBAC9BI,KAAKJ,gBAAkB,EACvBI,KAAKR,OAAOL,GAAM,CAChBe,WACAC,aACAhB,KACAiB,YAAY,IAAIlE,WACbe,KAAK+C,KAAKT,MAAMW,GAAUjE,UAC1B4C,IAAImB,KAAKT,MAAMY,GAAYlE,UAC3BoE,eAAe,OAhCxB,sBAoCE,WACE,OAAOpB,OAAOqB,OAAON,KAAKT,SArC9B,uBAwCE,WACE,OAAON,OAAOqB,OAAON,KAAKR,UAzC9B,4BA4CE,SAAeL,GAA2C,IAAD,EACVa,KAAKR,OAAOL,GAAjDe,EAD+C,EAC/CA,SAAUE,EADqC,EACrCA,WAAYD,EADyB,EACzBA,WAC9B,MAAO,CACLH,KAAKT,MAAMW,GAAUjE,SACrBmE,EACAJ,KAAKT,MAAMY,GAAYlE,YAjD7B,gCAqDE,WAAgC,IAAD,OAC7B,OAAO8C,EAAKiB,KAAKD,UACdQ,OAAOrB,GACPqB,QAAO,SAACnD,GAAD,OAAO,EAAK2C,SAAS3C,QAxDnC,iCA2DE,WAAkC,IAAD,OAC/B,OAAO2B,EAAKiB,KAAKD,UACdQ,OAAOlB,GACPkB,QAAO,SAACnD,GAAD,OAAO,EAAK2C,SAAS3C,QA9DnC,qBAiEE,SAAQ+B,EAAeb,GACjBY,EAASC,GAAKa,KAAKQ,YAAYrB,EAAIb,GAC9Be,EAAUF,IAAKa,KAAKS,aAAatB,EAAIb,GAC9CoC,QAAQC,IAAIX,KAAKD,SAAUC,KAAKT,OAChCS,KAAKxE,WArET,yBAwEE,SAAY2D,EAAYb,GAA4B,IAAD,OAC7C0B,KAAKY,WAAWzB,GACdb,EAAMuC,SACRb,KAAKD,SAASZ,IAAM,EAEpBa,KAAKD,SAAW,GAETzB,EAAMuC,SACfb,KAAKD,SAASZ,IAAM,EACXb,EAAMwC,SAAWxC,EAAMyC,SAChCf,KAAKgB,qBAAqBC,SAAQ,SAACf,GACjC,EAAKgB,SAAShB,EAAUf,MAE1Ba,KAAKD,SAAW,IAEhBC,KAAKD,SAAL,eAAmBZ,GAAK,KAvF9B,0BA2FE,SAAaA,EAAab,GACpB0B,KAAKY,WAAWzB,GACdb,EAAMuC,SACRb,KAAKD,SAASZ,IAAM,EAEpBa,KAAKD,SAAW,IAETzB,EAAMuC,UAAcvC,EAAMwC,SAAWxC,EAAMyC,QAG3CzC,EAAMwC,SAAWxC,EAAMyC,QAEhCf,KAAKD,SAAW,GAEhBC,KAAKD,SAAL,eAAmBZ,GAAK,GALxBa,KAAKD,SAASZ,IAAM,IApG1B,wBA6GE,SAAWA,GACT,QAASa,KAAKD,SAASZ,KA9G3B,wBAiHE,SAAWA,GAAmB,IAAD,cACpBa,KAAKT,MAAMJ,GAClBJ,EAAKiB,KAAKR,QAAQyB,SAAQ,SAACE,GACzB,IAAMC,EAAQ,EAAK5B,OAAO2B,GACtBC,EAAMjB,aAAehB,GAAMiC,EAAMlB,WAAaf,UACzC,EAAKK,OAAO2B,QAtH3B,yBA2HE,SAAYhC,GAAoB,IAAD,cACtBa,KAAKR,OAAOL,GACnBJ,EAAKiB,KAAKP,WAAWwB,SAAQ,SAACI,GAC5B,IAAMC,EAAW,EAAK7B,UAAU4B,IAE9BC,EAASC,YAAYC,SAASrC,IAC9BmC,EAASG,UAAUD,SAASrC,YAErB,EAAKM,UAAU4B,QAnI9B,4BAwIE,SAAelC,GAAuB,IAAD,cAC5Ba,KAAKP,UAAUN,GACtBJ,EAAKiB,KAAKN,aAAauB,SAAQ,SAACS,GAC9B,IAAMC,EAAa,EAAKjC,YAAYgC,IAElCC,EAAWJ,YAAYC,SAASrC,IAChCwC,EAAWF,UAAUD,SAASrC,YAEvB,EAAKO,YAAYgC,QAhJhC,8BAqJE,SAAiBvC,UACRa,KAAKN,YAAYP,KAtJ5B,uBAyJE,SAAUb,GAA6B,IAAD,OAClB,cAAdA,EAAMsD,MACR7C,EAAKiB,KAAKD,UAAUkB,SAAQ,SAAC9B,GACvBD,EAASC,IAAK,EAAK0C,WAAW1C,GAC9BE,EAAUF,IAAK,EAAK2C,YAAY3C,GAlM5C,SAAsBA,GACpB,OAAOA,EAAGC,WAAW,MAkMX2C,CAAa5C,IAAK,EAAK6C,eAAe7C,GA/LlD,SAAwBA,GACtB,OAAOA,EAAGC,WAAW,MA+LX6C,CAAe9C,IAAK,EAAK+C,iBAAiB/C,MAEhDa,KAAKD,SAAW,GAChBC,KAAKxE,cAlKX,KChDO,SAAS2G,EAAT,GAAkE,IAArCC,EAAoC,EAApCA,MAClC,OACE,mCACEC,OAAO,WACPD,MAAOA,EAAME,WACbC,KAAMC,aCNL,SAASC,EAAT,GAA8D,IAArCL,EAAoC,EAApCA,MAC9B,OACE,sCACEC,OAAO,WACPD,MAAOA,EAAME,WACbI,kBAAmB,EACnBC,UAAW,KCNV,SAASC,EAAT,GAAoE,IAArCR,EAAoC,EAApCA,MACpC,OACE,sCACEC,OAAO,WACPD,MAAOA,EAAME,WACbO,QAAS,GACTC,aAAW,I,4BCTV,SAASC,EACdC,GAGiB,IAFjBC,EAEgB,uDAFP,IACTC,EACgB,uDADH,GAEb,OAAO,IAAIC,IAAqBC,aACZ,IAAlBJ,EAAOK,OAAP,YACQC,wBADR,YACiCN,IADjC,YAEQO,oBAFR,YAE6BP,IAC7BE,EACAD,EACA,ICZG,SAASO,IAKd,IAFiB,IAFjBP,EAEgB,uDAFP,IACTC,EACgB,uDADH,GAEPO,EAAmB,GAChBC,EAAI,EAAGA,GAAKR,EAAYQ,IAC/BD,EAAiBE,KACf,IAAIpG,UACF0F,EAASW,KAAKC,IAAKH,EAAIE,KAAKE,GAAMZ,IACjCD,EAASW,KAAKG,IAAKL,EAAIE,KAAKE,GAAMZ,KAKzC,OAAO,IAAIc,gBAAcP,EAAkB,EAAIP,GCF1C,SAASe,IAA+B,IAAD,EACHnI,IAAjCT,EADoC,EACpCA,qBAAsBG,EADc,EACdA,OACxB0I,EAAW7H,iBAAO,IAAIiD,EAAS9D,IAASwB,QAFF,EAGnBV,cAAjBC,EAHoC,EAGpCA,OAAQC,EAH4B,EAG5BA,KAEhBO,qBAAU,WAKR,OAJAoH,SAASC,iBAAiB,UAAWF,EAASG,UAAUvG,KAAKoG,IAItD,WACLC,SAASG,oBACP,UACAJ,EAASG,UAAUvG,KAAKoG,OAG3B,IAhByC,MAmBvBK,mBAAS,IAAvBC,EAnBqC,sBAoBjBD,mBAAS,KAA7BE,EApBqC,sBAqBnBF,mBAAS,MAA3BG,EArBqC,sBAsBtBH,mBAAS,KAAxBI,EAtBqC,oBAwBtClI,EAAYC,mBAAQ,kBAAM,IAAIC,cAAa,IAC3CiI,EAAQlI,mBAAQ,kBAAM,IAAIG,QAAM,IAAIX,UAAQ,EAAG,EAAG,MAAK,IA8B7D,OA5BAa,qBACE,kBACE1B,GAAqB,kBAAM,SAACiD,GAC1B,KACEA,EAAMwC,SACNxC,EAAMuG,QACNvG,EAAMyC,SACNzC,EAAMuC,UACNvC,EAAMwG,OAAS,GALjB,CAUA,IAAMxH,EAAe,IAAIC,UACtBe,EAAMlB,EAAIZ,EAAKgB,MAAS,EAAI,GAC3Bc,EAAMjB,EAAIb,EAAKiB,OAAU,EAAI,GAG3BC,EAAe,IAAIxB,UACzBO,EAAUkB,cAAcL,EAAcf,GACtCE,EAAUmB,IAAIC,eAAe+G,EAAOlH,GAEpCwG,EAASa,QAAQrH,GACjBlC,WAEJ,CAACH,IAID,qCACG6I,EAASc,WAAWC,KAAI,gBAAGhJ,EAAH,EAAGA,SAAciJ,EAAjB,EAAa/F,GAAb,OACvB,eAAC,EAAD,CACElD,SAAUA,EAEVE,QAAS,SAACmC,GAAD,OAA6B4F,EAAS/H,QAAQ+I,EAAQ5G,IAHjE,UAKE,sBACE6G,SAAU3B,EAAkBgB,GAC5BY,YAAU,EACVC,eAAa,EAHf,SAKE,cAAC5C,EAAD,CAAeL,MAAOhI,EAAOK,SAE9ByJ,EAAStD,WAAWsE,IACnB,sBAAMC,SAAU3B,EAAkBgB,EAAaE,GAA/C,SACE,cAACvC,EAAD,CAAmBC,MAAOhI,EAAOC,WAAW,SAZ3C6K,MAiBRhB,EAASoB,YAAYL,KAAI,WAA8BM,GAA9B,IAAOpE,EAAP,EAAGhC,GAAaiB,EAAhB,EAAgBA,WAAhB,OACxB,qCACE,sBAEE+E,SAAUpC,EACRmB,EAASsB,eAAerE,GACxBwD,GAEFxI,QAAS,SAACmC,GAAD,OAAiB4F,EAAS/H,QAAQgF,EAAS7C,IACpD8G,YAAU,EACVC,eAAa,EARf,SAUE,cAAC5C,EAAD,CAAeL,MAAOhI,EAAOK,QATxB0G,GAWN+C,EAAStD,WAAWO,IACnB,qCACE,sBAEEgE,SAAUpC,EACRmB,EAASsB,eAAerE,GACxBwD,EAAcD,GAJlB,SAOE,cAACvC,EAAD,CAAmBC,MAAOhI,EAAOC,WAAW,MANvC8G,EAAU,aAQjB,cAAC,EAAD,CAAWlF,SAAUmE,EAArB,SACE,sBAAM+E,SAAU3B,EAAkBiB,GAAlC,SACE,cAAC7B,EAAD,CAAqBR,MAAOhI,EAAOC,WAAW,QAFZ8G,EAAU,0B,YClHjDsE,EAAe,WAE1B,OACE,qCACE,8BAAcC,UAAW,MACzB,kCACEzJ,SAAU,CAAC,EAAG,EAAG,IACjBmG,MAAOhI,EAAOQ,SAASC,KAAKyH,WAC5B8C,YAAY,IAEd,kCACEnJ,SAAU,CAAC,GAAI,GAAI,IACnBmG,MAAOhI,EAAOQ,SAASG,KAAKuH,WAC5B8C,YAAY,IAEd,kCACEnJ,SAAU,EAAE,GAAI,GAAI,IACpBmG,MAAOhI,EAAOQ,SAASE,QAAQwH,WAC/B8C,YAAY,IAEd,kCACEnJ,SAAU,CAAC,EAAG,GAAI,GAClBmG,MAAOhI,EAAOQ,SAASC,KAAKyH,WAC5B8C,YAAY,IAEd,kCACEnJ,SAAU,CAAC,GAAI,GAAI,GACnBmG,MAAOhI,EAAOQ,SAASG,KAAKuH,WAC5B8C,YAAY,Q,SCvBb,SAASO,EAAT,GAIiB,IAHtBjK,EAGqB,EAHrBA,SAGqB,EAC6B6I,oBAAS,GADtC,mBACdqB,EADc,KACKxK,EADL,OAEiBmJ,mBAAsB,QAFvC,mBAEdhJ,EAFc,KAEDD,EAFC,OAG6BiJ,oBAEhD,eALmB,mBAGdsB,EAHc,KAGKxK,EAHL,OAOmBkJ,oBAAS,GAP5B,mBAOAuB,GAPA,WAQftK,EAAS2B,uBAAY,kBAAY2I,GAAgB,SAAC1I,GAAD,OAAQA,OAAI,IAEnE,OACE,qBAAK2I,MAAO,CAAE9J,SAAU,WAAY+J,KAAM,EAAGC,MAAO,EAAGC,IAAK,EAAGC,OAAQ,GAAvE,SACE,cAAC1K,EAAD,CACEE,YAAa,CACXP,uBACAC,uBACAC,iBACAC,cACAC,UANJ,SASE,eAAC,IAAD,CACEuK,MAAO,CAAEK,WAAYhM,EAAOG,MAAM+H,YAClC/F,OAAQ,CAAEN,SAAU,CAAC,EAAG,EAAG,KAC3BoK,gBAAiBR,EACjBS,SAAO,EAJT,UAME,4BAAYC,KAAM,CAAC,GAAI,MACvB,cAAC,EAAD,IACC7K,GACCkK,GAAoC,QAAfrK,GACrB,cAACiL,EAAA,EAAD,CAAeC,YAAY,WC/BxBC,MARf,WACE,OACE,cAACf,EAAD,UACE,cAAC1B,EAAD,OCDN0C,IAASnL,OACP,cAAC,IAAMoL,WAAP,UACE,cAAC,EAAD,MAEFzC,SAAS0C,eAAe,W","file":"static/js/main.7e173586.chunk.js","sourcesContent":["import Color from \"color\";\n\nexport const Colors = {\n  HIGHLIGHTS: [Color(\"#11E533\")],\n  BLACK: Color(\"#000000\"),\n  DARK: Color(\"#0d1416\"),\n  GREY: Color(\"#475154\"),\n  LIGHT: Color(\"#f7f9f9\"),\n  WHITE: Color(\"#FFFFFF\"),\n  LIGHTING: {\n    WARM: Color(\"#FFCCCC\"),\n    NEUTRAL: Color(\"#E5CCE5\"),\n    COLD: Color(\"#CCCCFF\"),\n  },\n};\n","import styled from \"styled-components\";\n\nexport const Column = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n","import styled from \"styled-components\";\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Colors } from \"./Colors\";\nimport Color from \"color\";\n\ninterface Props {\n  size?: \"small\" | \"tiny\";\n  color?: Color;\n  children: React.ReactNode;\n  unselectable?: boolean;\n  monospace?: boolean;\n  style?: React.CSSProperties;\n}\n\nexport function T({\n  size,\n  color,\n  unselectable,\n  monospace,\n  children,\n  style,\n}: Props): React.ReactElement {\n  const finalStyle = {\n    color: (color || Colors.LIGHT.fade(0.2)).toString(),\n    fontSize:\n      size === \"tiny\" ? 8 : size === \"small\" ? 11 : size === \"big\" ? 16 : 12,\n    fontFamily: monospace ? \"monospace\" : undefined,\n    ...style,\n  };\n\n  return unselectable ? (\n    <UnselectableText style={finalStyle}>{children}</UnselectableText>\n  ) : (\n    <div style={finalStyle}>{children}</div>\n  );\n}\n\nconst UnselectableText = styled.div`\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n`;\n","import React, {\n  createContext,\n  ReactElement,\n  ReactNode,\n  useContext,\n} from \"react\";\nimport { ControlMode } from \"./ControlMode\";\n\ntype Environment = {\n  setCurrentlyDragging: (enabled: boolean) => void;\n  setOnBackgroundClick: (handler: (event: MouseEvent) => void) => void;\n  setControlMode: (mode: ControlMode) => void;\n  controlMode: ControlMode;\n  render: () => void;\n};\n\nconst EnvironmentContext = createContext<Environment>({\n  setCurrentlyDragging: () => {},\n  setOnBackgroundClick: () => {},\n  setControlMode: () => {},\n  controlMode: \"view\",\n  render: () => {},\n});\n\nexport function EnvironmentContextProvider({\n  children,\n  environment,\n}: {\n  environment: Environment;\n  children: ReactNode;\n}): ReactElement {\n  return (\n    <EnvironmentContext.Provider value={environment}>\n      {children}\n    </EnvironmentContext.Provider>\n  );\n}\n\nexport function useEnvironment(): Environment {\n  return useContext(EnvironmentContext);\n}\n","import React, {\n  ReactElement,\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from \"react\";\nimport { useThree } from \"@react-three/fiber\";\nimport { useDrag } from \"react-use-gesture\";\nimport { Group, Plane, Raycaster, Vector2, Vector3 } from \"three\";\nimport { useEnvironment } from \"./useEnvironment\";\nimport { ClickEvent } from \"./ClickEvent\";\n\ntype Props = {\n  position?: Vector3;\n  onClick?: (event: ClickEvent) => void;\n  children?: ReactNode;\n};\n\nexport const Draggable = ({\n  position = new Vector3(0, 0, 0),\n  onClick,\n  children,\n}: Props): ReactElement => {\n  const objectRef = useRef<Group>(null);\n  const { setCurrentlyDragging } = useEnvironment();\n  const { camera, size } = useThree();\n\n  // Raycaster and plane used to project the mouse movements from the camera onto the plane\n  const raycaster = useMemo(() => new Raycaster(), []);\n  const planeRef = useRef(new Plane(new Vector3(0, 0, 1)));\n  const mouseObjectOffset = useRef(new Vector3(0, 0, 0));\n\n  useEffect(() => {\n    if (objectRef.current) {\n      objectRef.current.position.copy(position);\n    }\n  }, []);\n\n  const screenToSpace = useCallback((x: number, y: number): Vector3 => {\n    const screenCoords = new Vector2(\n      (x / size.width) * 2 - 1,\n      -(y / size.height) * 2 + 1\n    );\n\n    const intersection = new Vector3();\n    raycaster.setFromCamera(screenCoords, camera);\n    raycaster.ray.intersectPlane(planeRef.current, intersection);\n\n    return intersection;\n  }, []);\n\n  const bind = useDrag(\n    ({ xy: [x, y], movement: [dx, dy], first, last, event }) => {\n      event.stopPropagation();\n      if (first) {\n        setCurrentlyDragging(true);\n\n        const cameraDirection = new Vector3();\n        camera.getWorldDirection(cameraDirection);\n        planeRef.current.setFromNormalAndCoplanarPoint(\n          cameraDirection,\n          objectRef.current?.position || new Vector3(0, 0, 0)\n        );\n\n        mouseObjectOffset.current =\n          objectRef.current?.position.clone().sub(screenToSpace(x, y)) ||\n          new Vector3(0, 0, 0);\n      }\n\n      if (objectRef.current) {\n        objectRef.current.position.copy(\n          screenToSpace(x, y).add(mouseObjectOffset.current)\n        );\n      }\n\n      if (last) {\n        setCurrentlyDragging(false);\n        if (objectRef.current) position.copy(objectRef.current.position);\n        if (dx === 0 && dy === 0) onClick?.(event);\n      }\n    }\n  ) as () => {};\n\n  return (\n    <group {...bind()} ref={objectRef}>\n      {children}\n    </group>\n  );\n};\n","export function keys<T extends Record<string, unknown>>(o: T): (keyof T)[] {\n  return Object.keys(o) as (keyof T)[];\n}\n","import { Vector3 } from \"three\";\nimport { keys } from \"../utilities/keys\";\nimport { ClickDetails } from \"./ClickDetails\";\nimport autoBind from \"auto-bind\";\n\ntype NodeId = `n${number}`;\ntype ArrowId = `1a${number}`;\ntype TwoArrowId = `2a${number}`;\ntype ThreeArrowId = `3a${number}`;\ntype ElementId = NodeId | ArrowId | TwoArrowId | ThreeArrowId;\n\nfunction isNodeId(id: ElementId): id is NodeId {\n  return id.startsWith(\"n\");\n}\n\nfunction isArrowId(id: ElementId): id is ArrowId {\n  return id.startsWith(\"1a\");\n}\n\nfunction isTwoArrowId(id: ElementId): id is TwoArrowId {\n  return id.startsWith(\"2a\");\n}\n\nfunction isThreeArrowId(id: ElementId): id is ThreeArrowId {\n  return id.startsWith(\"3a\");\n}\n\ninterface Element {\n  label?: string;\n}\n\ninterface Node extends Element {\n  id: NodeId;\n  position: Vector3;\n}\n\ninterface Arrow extends Element {\n  id: ArrowId;\n  domainId: NodeId;\n  codomainId: NodeId;\n  guidePoint: Vector3;\n}\n\ninterface TwoArrow extends Element {\n  id: TwoArrowId;\n  domainIds: ArrowId[];\n  codomainIds: ArrowId[];\n  guidePoint: Vector3;\n}\n\ninterface ThreeArrow extends Element {\n  id: ThreeArrowId;\n  domainIds: TwoArrowId[];\n  codomainIds: TwoArrowId[];\n}\n\nexport class Elements {\n  private nodes: Record<NodeId, Node> = {};\n  private arrows: Record<ArrowId, Arrow> = {};\n  private twoArrows: Record<TwoArrowId, TwoArrow> = {};\n  private threeArrows: Record<ThreeArrowId, ThreeArrow> = {};\n  private nodeIdCounter = 0;\n  private arrowIdCounter = 0;\n  private twoArrowIdCounter = 0;\n  private threeArrowIdCounter = 0;\n  private selected: Record<ElementId, boolean> = {};\n\n  constructor(private render: () => void) {}\n\n  addNode(position: Vector3): void {\n    const id: NodeId = `n${this.nodeIdCounter}`;\n    this.nodeIdCounter += 1;\n    this.nodes[id] = { position, id };\n    this.selected = {};\n    this.render();\n    autoBind(this);\n  }\n\n  addArrow(domainId: NodeId, codomainId: NodeId): void {\n    const id: ArrowId = `1a${this.arrowIdCounter}`;\n    this.arrowIdCounter += 1;\n    this.arrows[id] = {\n      domainId,\n      codomainId,\n      id,\n      guidePoint: new Vector3()\n        .copy(this.nodes[domainId].position)\n        .add(this.nodes[codomainId].position)\n        .multiplyScalar(0.5),\n    };\n  }\n\n  getNodes(): Node[] {\n    return Object.values(this.nodes);\n  }\n\n  getArrows(): Arrow[] {\n    return Object.values(this.arrows);\n  }\n\n  getArrowPoints(id: ArrowId): [Vector3, Vector3, Vector3] {\n    const { domainId, guidePoint, codomainId } = this.arrows[id];\n    return [\n      this.nodes[domainId].position,\n      guidePoint,\n      this.nodes[codomainId].position,\n    ];\n  }\n\n  getSelectedNodeIds(): NodeId[] {\n    return keys(this.selected)\n      .filter(isNodeId)\n      .filter((x) => this.selected[x]);\n  }\n\n  getSelectedArrowIds(): ArrowId[] {\n    return keys(this.selected)\n      .filter(isArrowId)\n      .filter((x) => this.selected[x]);\n  }\n\n  onClick(id: ElementId, event: ClickDetails): void {\n    if (isNodeId(id)) this.onNodeClick(id, event);\n    else if (isArrowId(id)) this.onArrowClick(id, event);\n    console.log(this.selected, this.nodes);\n    this.render();\n  }\n\n  onNodeClick(id: NodeId, event: ClickDetails): void {\n    if (this.isSelected(id)) {\n      if (event.shiftKey) {\n        this.selected[id] = false;\n      } else {\n        this.selected = {};\n      }\n    } else if (event.shiftKey) {\n      this.selected[id] = true;\n    } else if (event.ctrlKey || event.metaKey) {\n      this.getSelectedNodeIds().forEach((domainId) => {\n        this.addArrow(domainId, id);\n      });\n      this.selected = {};\n    } else {\n      this.selected = { [id]: true };\n    }\n  }\n\n  onArrowClick(id: ArrowId, event: ClickDetails): void {\n    if (this.isSelected(id)) {\n      if (event.shiftKey) {\n        this.selected[id] = false;\n      } else {\n        this.selected = {};\n      }\n    } else if (event.shiftKey && !(event.ctrlKey || event.metaKey)) {\n      // TODO: check that the selected arrows compose\n      this.selected[id] = true;\n    } else if (event.ctrlKey || event.metaKey) {\n      // TODO: work out how to build a 2-arrow\n      this.selected = {};\n    } else {\n      this.selected = { [id]: true };\n    }\n  }\n\n  isSelected(id: ElementId): boolean {\n    return !!this.selected[id];\n  }\n\n  deleteNode(id: NodeId): void {\n    delete this.nodes[id];\n    keys(this.arrows).forEach((arrowId) => {\n      const arrow = this.arrows[arrowId];\n      if (arrow.codomainId === id || arrow.domainId === id) {\n        delete this.arrows[arrowId];\n      }\n    });\n  }\n\n  deleteArrow(id: ArrowId): void {\n    delete this.arrows[id];\n    keys(this.twoArrows).forEach((twoArrowId) => {\n      const twoArrow = this.twoArrows[twoArrowId];\n      if (\n        twoArrow.codomainIds.includes(id) ||\n        twoArrow.domainIds.includes(id)\n      ) {\n        delete this.twoArrows[twoArrowId];\n      }\n    });\n  }\n\n  deleteTwoArrow(id: TwoArrowId): void {\n    delete this.twoArrows[id];\n    keys(this.threeArrows).forEach((threeArrowId) => {\n      const threeArrow = this.threeArrows[threeArrowId];\n      if (\n        threeArrow.codomainIds.includes(id) ||\n        threeArrow.domainIds.includes(id)\n      ) {\n        delete this.threeArrows[threeArrowId];\n      }\n    });\n  }\n\n  deleteThreeArrow(id: ThreeArrowId): void {\n    delete this.threeArrows[id];\n  }\n\n  onKeyDown(event: KeyboardEvent): void {\n    if (event.key === \"Backspace\") {\n      keys(this.selected).forEach((id) => {\n        if (isNodeId(id)) this.deleteNode(id);\n        if (isArrowId(id)) this.deleteArrow(id);\n        if (isTwoArrowId(id)) this.deleteTwoArrow(id);\n        if (isThreeArrowId(id)) this.deleteThreeArrow(id);\n      });\n      this.selected = {};\n      this.render();\n    }\n  }\n}\n","import React from \"react\";\nimport Color from \"color\";\nimport { BackSide } from \"three\";\n\ninterface Props {\n  color: Color;\n}\n\nexport function HighlightMaterial({ color }: Props): React.ReactElement {\n  return (\n    <meshBasicMaterial\n      attach=\"material\"\n      color={color.toString()}\n      side={BackSide}\n    />\n  );\n}\n","import React from \"react\";\nimport Color from \"color\";\n\ninterface Props {\n  color: Color;\n}\n\nexport function SolidMaterial({ color }: Props): React.ReactElement {\n  return (\n    <meshStandardMaterial\n      attach=\"material\"\n      color={color.toString()}\n      emissiveIntensity={0}\n      roughness={0.5}\n    />\n  );\n}\n","import React from \"react\";\nimport Color from \"color\";\n\ninterface Props {\n  color: Color;\n}\n\nexport function TranslucentMaterial({ color }: Props): React.ReactElement {\n  return (\n    <meshStandardMaterial\n      attach=\"material\"\n      color={color.toString()}\n      opacity={0.3}\n      transparent\n    />\n  );\n}\n","import { CubicBezierCurve3, QuadraticBezierCurve3, Vector3 } from \"three\";\nimport { BufferGeometry } from \"three/src/core/BufferGeometry\";\nimport { ParametricGeometries } from \"three/examples/jsm/geometries/ParametricGeometries\";\n\nexport function getBezierTubeGeometry(\n  points: [Vector3, Vector3, Vector3] | [Vector3, Vector3, Vector3, Vector3],\n  radius = 0.02,\n  resolution = 48\n): BufferGeometry {\n  return new ParametricGeometries.TubeGeometry(\n    points.length === 3\n      ? new QuadraticBezierCurve3(...points)\n      : new CubicBezierCurve3(...points),\n    resolution,\n    radius,\n    12\n  );\n}\n","import { LatheGeometry, Vector2 } from \"three\";\nimport { BufferGeometry } from \"three/src/core/BufferGeometry\";\n\nexport function getSphereGeometry(\n  radius = 0.05,\n  resolution = 12\n): BufferGeometry {\n  const semicirclePoints = [];\n  for (let i = 0; i <= resolution; i++) {\n    semicirclePoints.push(\n      new Vector2(\n        radius * Math.sin((i * Math.PI) / resolution),\n        -radius * Math.cos((i * Math.PI) / resolution)\n      )\n    );\n  }\n\n  return new LatheGeometry(semicirclePoints, 2 * resolution);\n}\n","import React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { Colors } from \"ui\";\nimport { Draggable } from \"./Draggable\";\nimport { Plane, Raycaster, Vector2, Vector3 } from \"three\";\nimport { useEnvironment } from \"./useEnvironment\";\nimport { useThree } from \"@react-three/fiber\";\nimport { Elements } from \"logic\";\nimport {\n  HighlightMaterial,\n  SolidMaterial,\n  TranslucentMaterial,\n} from \"./materials\";\nimport { ClickEvent } from \"./ClickEvent\";\nimport { getBezierTubeGeometry, getSphereGeometry } from \"./geometries\";\n\nexport function Content(): React.ReactElement {\n  const { setOnBackgroundClick, render } = useEnvironment();\n  const elements = useRef(new Elements(render)).current;\n  const { camera, size } = useThree();\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", elements.onKeyDown.bind(elements));\n\n    // TODO: load state from url\n\n    return (): void => {\n      document.removeEventListener(\n        \"keydown\",\n        elements.onKeyDown.bind(elements)\n      );\n    };\n  }, []);\n\n  // TODO: add options section to control these variables\n  const [nodeRadius] = useState(0.1);\n  const [guidePointRadius] = useState(0.07);\n  const [highlightWidth] = useState(0.005);\n  const [arrowRadius] = useState(0.02);\n\n  const raycaster = useMemo(() => new Raycaster(), []);\n  const plane = useMemo(() => new Plane(new Vector3(0, 1, 0)), []);\n\n  useEffect(\n    () =>\n      setOnBackgroundClick(() => (event: MouseEvent): void => {\n        if (\n          event.ctrlKey ||\n          event.altKey ||\n          event.metaKey ||\n          event.shiftKey ||\n          event.button > 1\n        ) {\n          return;\n        }\n\n        const screenCoords = new Vector2(\n          (event.x / size.width) * 2 - 1,\n          -(event.y / size.height) * 2 + 1\n        );\n\n        const intersection = new Vector3();\n        raycaster.setFromCamera(screenCoords, camera);\n        raycaster.ray.intersectPlane(plane, intersection);\n\n        elements.addNode(intersection);\n        render();\n      }),\n    [setOnBackgroundClick]\n  );\n\n  return (\n    <>\n      {elements.getNodes().map(({ position, id: nodeId }) => (\n        <Draggable\n          position={position}\n          key={nodeId}\n          onClick={(event: ClickEvent): void => elements.onClick(nodeId, event)}\n        >\n          <mesh\n            geometry={getSphereGeometry(nodeRadius)}\n            castShadow\n            receiveShadow\n          >\n            <SolidMaterial color={Colors.GREY} />\n          </mesh>\n          {elements.isSelected(nodeId) && (\n            <mesh geometry={getSphereGeometry(nodeRadius + highlightWidth)}>\n              <HighlightMaterial color={Colors.HIGHLIGHTS[0]} />\n            </mesh>\n          )}\n        </Draggable>\n      ))}\n      {elements.getArrows().map(({ id: arrowId, guidePoint }, index) => (\n        <>\n          <mesh\n            key={arrowId}\n            geometry={getBezierTubeGeometry(\n              elements.getArrowPoints(arrowId),\n              arrowRadius\n            )}\n            onClick={(event): void => elements.onClick(arrowId, event)}\n            castShadow\n            receiveShadow\n          >\n            <SolidMaterial color={Colors.GREY} />\n          </mesh>\n          {elements.isSelected(arrowId) && (\n            <>\n              <mesh\n                key={arrowId + \"highlight\"}\n                geometry={getBezierTubeGeometry(\n                  elements.getArrowPoints(arrowId),\n                  arrowRadius + highlightWidth\n                )}\n              >\n                <HighlightMaterial color={Colors.HIGHLIGHTS[0]} />\n              </mesh>\n              <Draggable position={guidePoint} key={arrowId + \"guidePoint\"}>\n                <mesh geometry={getSphereGeometry(guidePointRadius)}>\n                  <TranslucentMaterial color={Colors.HIGHLIGHTS[0]} />\n                </mesh>\n              </Draggable>\n            </>\n          )}\n        </>\n      ))}\n    </>\n  );\n}\n","import React, { FC } from \"react\";\nimport { Colors } from \"ui\";\n\nexport const Lighting: FC = () => {\n  // general glow plus three slightly different-warmth lights around the equator\n  return (\n    <>\n      <ambientLight intensity={0.45} />\n      <directionalLight\n        position={[0, 0, 20]}\n        color={Colors.LIGHTING.WARM.toString()}\n        castShadow={true}\n      />\n      <directionalLight\n        position={[17, 0, -10]}\n        color={Colors.LIGHTING.COLD.toString()}\n        castShadow={true}\n      />\n      <directionalLight\n        position={[-17, 0, -10]}\n        color={Colors.LIGHTING.NEUTRAL.toString()}\n        castShadow={true}\n      />\n      <directionalLight\n        position={[0, 20, 0]}\n        color={Colors.LIGHTING.WARM.toString()}\n        castShadow={true}\n      />\n      <directionalLight\n        position={[0, -20, 0]}\n        color={Colors.LIGHTING.COLD.toString()}\n        castShadow={true}\n      />\n    </>\n  );\n};\n","import React, { ReactNode, useCallback, useState } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { Lighting } from \"./Lighting\";\nimport { Colors } from \"ui\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport { EnvironmentContextProvider } from \"./useEnvironment\";\nimport { ControlMode } from \"./ControlMode\";\n\nexport function Environment({\n  children,\n}: {\n  children: ReactNode;\n}): React.ReactElement {\n  const [currentlyDragging, setCurrentlyDragging] = useState(false);\n  const [controlMode, setControlMode] = useState<ControlMode>(\"view\");\n  const [onBackgroundClick, setOnBackgroundClick] = useState<\n    (event: MouseEvent) => void\n  >(() => {});\n\n  const [renderHelper, setRenderHelper] = useState(false);\n  const render = useCallback((): void => setRenderHelper((x) => !x), []);\n\n  return (\n    <div style={{ position: \"absolute\", left: 0, right: 0, top: 0, bottom: 0 }}>\n      <EnvironmentContextProvider\n        environment={{\n          setCurrentlyDragging,\n          setOnBackgroundClick,\n          setControlMode,\n          controlMode,\n          render,\n        }}\n      >\n        <Canvas\n          style={{ background: Colors.BLACK.toString() }}\n          camera={{ position: [4, 4, 10] }}\n          onPointerMissed={onBackgroundClick}\n          shadows\n        >\n          <gridHelper args={[20, 20]} />\n          <Lighting />\n          {children}\n          {!currentlyDragging && controlMode == \"view\" && (\n            <OrbitControls autoRotate={false} />\n          )}\n        </Canvas>\n      </EnvironmentContextProvider>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Content } from \"components\";\nimport { Environment } from \"./components/Environment\";\n\nfunction App(): React.ReactElement {\n  return (\n    <Environment>\n      <Content />\n    </Environment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n// TODO: Replace with createRoot\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}
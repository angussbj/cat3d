{"version":3,"sources":["ui/Colors.ts","ui/Column.tsx","ui/Row.tsx","ui/T.tsx","components/geometries/sphereGeometry.ts","components/useEnvironment.tsx","components/Draggable.tsx","components/Content.tsx","components/Lighting.tsx","components/Environment.tsx","App.tsx","index.tsx"],"names":["Colors","DARKEST","Color","DARKER","DARK","LIGHT","GREY","FOCUS","ACCENT_BLUE","ACCENT_ORANGE","SUPER_ACCENT","RED","BLUE","TRANSPARENT","alpha","BLACK","WHITE","LIGHTING","WARM","NEUTRAL","COLD","styled","div","getSphereGeometry","radius","resolution","semicirclePoints","i","push","Vector2","Math","sin","PI","cos","LatheGeometry","EnvironmentContext","createContext","setCurrentlyDragging","setOnBackgroundClick","setControlMode","controlMode","EnvironmentContextProvider","children","environment","Provider","value","useEnvironment","useContext","Draggable","initialPosition","Vector3","objectRef","useRef","useThree","camera","size","raycaster","useMemo","Raycaster","planeRef","Plane","mouseObjectOffset","useEffect","current","position","copy","screenToSpace","useCallback","x","y","screenCoords","width","height","intersection","setFromCamera","ray","intersectPlane","bind","useDrag","xy","first","last","event","stopPropagation","cameraDirection","getWorldDirection","setFromNormalAndCoplanarPoint","clone","sub","add","ref","Content","useState","objects","setObjects","plane","ctrlKey","altKey","metaKey","shiftKey","button","o","map","index","geometry","receiveShadow","attach","color","toString","emissive","emissiveIntensity","roughness","Lighting","intensity","castShadow","Environment","currentlyDragging","onBackgroundClick","style","left","right","top","bottom","background","onPointerMissed","shadows","args","OrbitControls","autoRotate","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.605f14f5.chunk.js","sourcesContent":["import Color from \"color\";\n\nexport const Colors = {\n  DARKEST: Color(\"#0d1416\"),\n  DARKER: Color(\"#1d2426\"),\n  DARK: Color(\"#283134\"),\n  LIGHT: Color(\"#f7f9f9\"),\n  GREY: Color(\"#CCCCCC\"),\n  FOCUS: Color(\"#5577FF\"),\n  ACCENT_BLUE: Color(\"#5ed6ff\"),\n  ACCENT_ORANGE: Color(\"#FF875E\"),\n  SUPER_ACCENT: Color(\"#ff6e3d\"),\n  RED: Color(\"#FF0000\"),\n  BLUE: Color(\"#0000FF\"),\n  TRANSPARENT: Color(\"#000000\").alpha(0),\n  BLACK: Color(\"#000000\"),\n  WHITE: Color(\"#FFFFFF\"),\n  LIGHTING: {\n    WARM: Color(\"#FFCCCC\"),\n    NEUTRAL: Color(\"#E5CCE5\"),\n    COLD: Color(\"#CCCCFF\"),\n  },\n};\n","import styled from \"styled-components\";\n\nexport const Column = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n","import styled from \"styled-components\";\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Colors } from \"./Colors\";\nimport Color from \"color\";\n\ninterface Props {\n  size?: \"small\" | \"tiny\";\n  color?: Color;\n  children: React.ReactNode;\n  unselectable?: boolean;\n  monospace?: boolean;\n  style?: React.CSSProperties;\n}\n\nexport function T({\n  size,\n  color,\n  unselectable,\n  monospace,\n  children,\n  style,\n}: Props): React.ReactElement {\n  const finalStyle = {\n    color: (color || Colors.LIGHT.fade(0.2)).toString(),\n    fontSize:\n      size === \"tiny\" ? 8 : size === \"small\" ? 11 : size === \"big\" ? 16 : 12,\n    fontFamily: monospace ? \"monospace\" : undefined,\n    ...style,\n  };\n\n  return unselectable ? (\n    <UnselectableText style={finalStyle}>{children}</UnselectableText>\n  ) : (\n    <div style={finalStyle}>{children}</div>\n  );\n}\n\nconst UnselectableText = styled.div`\n  -webkit-touch-callout: none;\n  -webkit-user-select: none;\n  -khtml-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n`;\n","import { LatheGeometry, Vector2 } from \"three\";\nimport { BufferGeometry } from \"three/src/core/BufferGeometry\";\n\nexport function getSphereGeometry(\n  radius = 0.05,\n  resolution = 12\n): BufferGeometry {\n  const semicirclePoints = [];\n  for (let i = 0; i <= resolution; i++) {\n    semicirclePoints.push(\n      new Vector2(\n        radius * Math.sin((i * Math.PI) / resolution),\n        -radius * Math.cos((i * Math.PI) / resolution)\n      )\n    );\n  }\n\n  return new LatheGeometry(semicirclePoints, 2 * resolution);\n}\n","import React, {\n  createContext,\n  ReactElement,\n  ReactNode,\n  useContext,\n} from \"react\";\nimport { ControlMode } from \"./ControlMode\";\n\ntype Environment = {\n  setCurrentlyDragging: (enabled: boolean) => void;\n  setOnBackgroundClick: (handler: (event: MouseEvent) => void) => void;\n  setControlMode: (mode: ControlMode) => void;\n  controlMode: ControlMode;\n};\n\nconst EnvironmentContext = createContext<Environment>({\n  setCurrentlyDragging: () => {},\n  setOnBackgroundClick: () => {},\n  setControlMode: () => {},\n  controlMode: \"view\",\n});\n\nexport function EnvironmentContextProvider({\n  children,\n  environment,\n}: {\n  environment: Environment;\n  children: ReactNode;\n}): ReactElement {\n  return (\n    <EnvironmentContext.Provider value={environment}>\n      {children}\n    </EnvironmentContext.Provider>\n  );\n}\n\nexport function useEnvironment(): Environment {\n  return useContext(EnvironmentContext);\n}\n","import React, {\n  ReactNode,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n} from \"react\";\nimport { useThree } from \"@react-three/fiber\";\nimport { useDrag } from \"react-use-gesture\";\nimport { Group, Plane, Raycaster, Vector2, Vector3 } from \"three\";\nimport { useEnvironment } from \"./useEnvironment\";\n\ntype DraggableProps = {\n  initialPosition?: Vector3;\n  children?: ReactNode;\n};\n\nexport const Draggable: React.FC<DraggableProps> = ({\n  children,\n  initialPosition = new Vector3(0, 0, 0),\n}) => {\n  const objectRef = useRef<Group>(null);\n  const { setCurrentlyDragging } = useEnvironment();\n  const { camera, size } = useThree();\n\n  // Raycaster and plane used to project the mouse movements from the camera onto the plane\n  const raycaster = useMemo(() => new Raycaster(), []);\n  const planeRef = useRef(new Plane(new Vector3(0, 0, 1)));\n  const mouseObjectOffset = useRef(new Vector3(0, 0, 0));\n\n  useEffect(() => {\n    if (objectRef.current) {\n      objectRef.current.position.copy(initialPosition);\n    }\n  }, []);\n\n  const screenToSpace = useCallback((x: number, y: number): Vector3 => {\n    const screenCoords = new Vector2(\n      (x / size.width) * 2 - 1,\n      -(y / size.height) * 2 + 1\n    );\n\n    const intersection = new Vector3();\n    raycaster.setFromCamera(screenCoords, camera);\n    raycaster.ray.intersectPlane(planeRef.current, intersection);\n\n    return intersection;\n  }, []);\n\n  const bind = useDrag(({ xy: [x, y], first, last, event }) => {\n    event.stopPropagation();\n    if (first) {\n      setCurrentlyDragging(true);\n\n      const cameraDirection = new Vector3();\n      camera.getWorldDirection(cameraDirection);\n      planeRef.current.setFromNormalAndCoplanarPoint(\n        cameraDirection,\n        objectRef.current?.position || new Vector3(0, 0, 0)\n      );\n\n      mouseObjectOffset.current =\n        objectRef.current?.position.clone().sub(screenToSpace(x, y)) ||\n        new Vector3(0, 0, 0);\n    }\n    if (last) setCurrentlyDragging(false);\n\n    if (objectRef.current) {\n      objectRef.current.position.copy(\n        screenToSpace(x, y).add(mouseObjectOffset.current)\n      );\n    }\n  }) as () => {};\n\n  return (\n    <group {...bind()} ref={objectRef}>\n      {children}\n    </group>\n  );\n};\n","import React, { useEffect, useMemo, useState } from \"react\";\nimport { Colors } from \"ui\";\nimport { getSphereGeometry } from \"./geometries/sphereGeometry\";\nimport { Draggable } from \"./Draggable\";\nimport { Plane, Raycaster, Vector2, Vector3 } from \"three\";\nimport { useEnvironment } from \"./useEnvironment\";\nimport { useThree } from \"@react-three/fiber\";\n\nexport function Content(): React.ReactElement {\n  // TODO: when dragging it doesn't update this position and that is bad\n  const [objects, setObjects] = useState([new Vector3(0, 0, 0)]);\n  const { setOnBackgroundClick } = useEnvironment();\n  const { camera, size } = useThree();\n\n  const raycaster = useMemo(() => new Raycaster(), []);\n  const plane = useMemo(() => new Plane(new Vector3(0, 1, 0)), []);\n\n  useEffect(\n    () =>\n      setOnBackgroundClick(() => (event: MouseEvent): void => {\n        if (\n          event.ctrlKey ||\n          event.altKey ||\n          event.metaKey ||\n          event.shiftKey ||\n          event.button > 1\n        ) {\n          return;\n        }\n\n        const screenCoords = new Vector2(\n          (event.x / size.width) * 2 - 1,\n          -(event.y / size.height) * 2 + 1\n        );\n\n        const intersection = new Vector3();\n        raycaster.setFromCamera(screenCoords, camera);\n        raycaster.ray.intersectPlane(plane, intersection);\n\n        // TODO: this shouldn't need to create a new list every time\n        setObjects((o) => [...o, intersection]);\n      }),\n    [setOnBackgroundClick]\n  );\n\n  return (\n    <>\n      {objects.map((position, index) => (\n        <Draggable initialPosition={position} key={index}>\n          <mesh geometry={getSphereGeometry(1)} receiveShadow>\n            <meshStandardMaterial\n              attach=\"material\"\n              color={Colors.DARK.toString()}\n              emissive={Colors.DARK.toString()}\n              emissiveIntensity={0}\n              roughness={0.5}\n            />\n          </mesh>\n        </Draggable>\n      ))}\n    </>\n  );\n}\n","import React, { FC } from \"react\";\nimport { Colors } from \"ui\";\n\nexport const Lighting: FC = () => {\n  // general glow plus three slightly different-warmth lights around the equator\n  return (\n    <>\n      <ambientLight intensity={0.45} />\n      <directionalLight\n        position={[0, 0, 20]}\n        color={Colors.LIGHTING.WARM.toString()}\n        castShadow={true}\n      />\n      <directionalLight\n        position={[17, 0, -10]}\n        color={Colors.LIGHTING.COLD.toString()}\n        castShadow={true}\n      />\n      <directionalLight\n        position={[-17, 0, -10]}\n        color={Colors.LIGHTING.NEUTRAL.toString()}\n        castShadow={true}\n      />\n    </>\n  );\n};\n","import React, { ReactNode, useState } from \"react\";\nimport { Canvas } from \"@react-three/fiber\";\nimport { Lighting } from \"./Lighting\";\nimport { Colors } from \"ui\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport { EnvironmentContextProvider } from \"./useEnvironment\";\nimport { ControlMode } from \"./ControlMode\";\n\nexport function Environment({\n  children,\n}: {\n  children: ReactNode;\n}): React.ReactElement {\n  const [currentlyDragging, setCurrentlyDragging] = useState(false);\n  const [controlMode, setControlMode] = useState<ControlMode>(\"view\");\n  const [onBackgroundClick, setOnBackgroundClick] = useState<\n    (event: MouseEvent) => void\n  >(() => {});\n\n  return (\n    <div style={{ position: \"absolute\", left: 0, right: 0, top: 0, bottom: 0 }}>\n      <EnvironmentContextProvider\n        environment={{\n          setCurrentlyDragging,\n          setOnBackgroundClick,\n          setControlMode,\n          controlMode,\n        }}\n      >\n        <Canvas\n          style={{ background: Colors.BLACK.toString() }}\n          camera={{ position: [0, 0, 10] }}\n          onPointerMissed={onBackgroundClick}\n          shadows\n        >\n          <gridHelper args={[20, 20]} />\n          <Lighting />\n          {children}\n          {!currentlyDragging && controlMode == \"view\" && (\n            <OrbitControls autoRotate={false} />\n          )}\n        </Canvas>\n      </EnvironmentContextProvider>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Content } from \"components\";\nimport { Environment } from \"./components/Environment\";\n\nfunction App(): React.ReactElement {\n  return (\n    <Environment>\n      <Content />\n    </Environment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\n// TODO: Replace with createRoot\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}